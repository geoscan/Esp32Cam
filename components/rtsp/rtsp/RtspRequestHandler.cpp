//
// RtspRequestHandler.cpp
//
// Created on:  Aug 24, 2020
// Author: Dmitry Murashov (d.murashov@geoscan.aero)
//

#include "RtspRequestHandler.hpp"
#include <sstream>

using namespace std;

std::string RtspRequestHandler::dateHeader()
{
	return "";
}

extern void parse(Rtsp::Request &, const void *, const size_t); // Parser generated by gnu flex/bison

std::string RtspRequestHandler::handle(asio::const_buffer buffer)
{
	Rtsp::Request request;
	parse(request, buffer.data(), buffer.size());

	switch (request.requestType.val()) {

		case Rtsp::RequestType::Play:
			return handlePlay(request);

		case Rtsp::RequestType::Describe:
			return handleDescribe(request);

		case Rtsp::RequestType::Setup:
			return handleSetup(request);

		case Rtsp::RequestType::Pause:
			return handlePause(request);

		case Rtsp::RequestType::Teardown:
			return handleTeardown(request);

		default:
			return handleNotStated(request);
	}
}


std::string RtspRequestHandler::handlePlay(const Rtsp::Request &)
{
	return {nullptr, 0};
}

std::string RtspRequestHandler::handleDescribe(const Rtsp::Request &req)
{
	if (!(req.format.isVal() && req.format.val() == Rtsp::Format::Mjpeg)) {
		stringstream ss;
		ss << kRtspVer << ' ' << (size_t)Rtsp::StatusCode::StreamNotFound << kCrlf
			<< kCseq << ": " << req.cseq.val() << kCrlf
			<< dateHeader() << kCrlf;
		return ss.str();
	}
	return "";
}

std::string RtspRequestHandler::handleSetup(const Rtsp::Request &)
{
	return "";
}

std::string RtspRequestHandler::handlePause(const Rtsp::Request &)
{
	return "";
}

std::string RtspRequestHandler::handleTeardown(const Rtsp::Request &)
{
	return "";
}

std::string RtspRequestHandler::handleNotStated(const Rtsp::Request &)
{
	return "";
}