//
// RtspRequestHandler.cpp
//
// Created on:  Aug 24, 2020
// Author: Dmitry Murashov (d.murashov@geoscan.aero)
//

#include "RtspRequestHandler.hpp"
#include "ResponseComposer.hpp"
#include <sstream>
#include "rtsp.h"
#include "esp_timer.h"

using namespace std;
using namespace Rtsp;

extern void parse(Rtsp::Request &, const void *, const size_t); // Parser generated by gnu flex/bison

std::string RtspRequestHandler::handle(asio::const_buffer buffer, asio::ip::address addr)
{
	Rtsp::Request request;
	parse(request, buffer.data(), buffer.size());
	request.clientAddress = addr;

	switch (request.requestType.val()) {

		case Rtsp::RequestType::Play:
			return handlePlay(request);

		case Rtsp::RequestType::Describe:
			return handleDescribe(request);

		case Rtsp::RequestType::Setup:
			return handleSetup(request);

		case Rtsp::RequestType::Pause:
			return handlePause(request);

		case Rtsp::RequestType::Teardown:
			return handleTeardown(request);

		default:
			return handleNotStated(request);
	}
}


std::string RtspRequestHandler::handlePlay(const Rtsp::Request &)
{
	return {nullptr, 0};
}

std::string RtspRequestHandler::handleDescribe(const Rtsp::Request &req)
{
	using Rc = ResponseComposer;

	if (!media.canCreateStreams(req)) {
		stringstream ss;
		return ResponseComposer::responseCode(req, StatusCode::StreamNotFound);
	}

	string mediaDescription(media.getSdp(req));

	auto url(Rc::compose("rtsp://", req.hostaddr.val(), ':', req.hostport.val(), '/', req.hostResource.val()));

	return Rc::compose(Rc::responseCode(req, StatusCode::Ok) , Rc::kCrlf,
		"CSeq: " , req.cseq.val() , Rc::kCrlf,
		"Content-Base: ", url , Rc::kCrlf,
		"Content-Type: " , "application/sdp" , Rc::kCrlf,
		"Content-Length: " , mediaDescription.length() , Rc::kCrlf,
		mediaDescription);
}

std::string RtspRequestHandler::handleSetup(const Rtsp::Request &)
{
	return "";
}

std::string RtspRequestHandler::handlePause(const Rtsp::Request &)
{
	return "";
}

std::string RtspRequestHandler::handleTeardown(const Rtsp::Request &)
{
	return "";
}

std::string RtspRequestHandler::handleNotStated(const Rtsp::Request &)
{
	return "";
}