//
// Api.impl
//
// Created on: Feb 09, 2022
//     Author: Dmitry Murashov (d.murashov@geoscan.aero)
//

#include "Api.hpp"  // For syntax highlighting

namespace Sock {

template <class TbufferType>
std::size_t Api::sendTo(const asio::ip::tcp::endpoint &aEndpoint, std::uint16_t aLocalPort,  TbufferType &&aBuffer,
	asio::error_code &aErr)
{
	auto it = container.tcpConnected.find(aEndpoint, aLocalPort);

	if (it == container.tcpConnected.end()) {
		return asio::error::not_connected;
	}

	{
		std::lock_guard<std::mutex> lock{syncAsyncMutex};

		return it->write_some(std::forward<TbufferType>(aBuffer), aErr);
	}
}

template <class TbufferType>
std::size_t Api::sendTo(const asio::ip::udp::endpoint &aRemoteEndpoint, std::uint16_t aLocalPort,  TbufferType &&aBuffer,
	asio::error_code &aErr)
{
	auto it = container.udp.find(aRemoteEndpoint, aLocalPort);

	if (it == container.udp.end()) {
		it = container.udp.emplace(container.udp.end(), ioContext, asio::ip::udp::endpoint{asio::ip::udp::v4(), aLocalPort});
	}

	{
		std::lock_guard<std::mutex> lock{syncAsyncMutex};

		return it->send_to(std::forward<TbufferType>(aBuffer), aRemoteEndpoint, 0, aErr);
	}
}

}  // namespace Sock
