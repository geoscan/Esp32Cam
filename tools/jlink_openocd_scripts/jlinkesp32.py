#!/usr/bin/python3

# Provides user with openocd-based GDB server for esp32 debugging over jlink's JTAG:
# 
# [ gdb server, openocd ]  ---  [ jlink's JTAG ]  ---  [ esp32 ]

import os
from jlinkpaths import *
import subprocess

target="esp32"
# target="esp32-solo-1"

flash_bootloader               = False
flash_partition_table          = False
flash_firmware                 = False
run_gdb_in_background          = False
shutdown_on_detach             = False

command_flash_bootloader       = f"program_esp32 {path_compiled_bootloader} {address_bootloader}"           if flash_bootloader   else ""
command_flash_partition_table  = f"program_esp32 {path_compiled_partition_table} {address_partition_table}" if flash_bootloader   else ""
command_flash_firmware         = f"program_esp32 {path_compiled_firmware} {address_firmware}"               if flash_firmware     else ""
command_shutdown_on_detach     = "$_TARGETNAME configure -event gdb-detach { shutdown }"                    if shutdown_on_detach else ""
adapter_speed_khz              = 10000

# Autogenerated config file

config_file = f"""
source [find interface/jlink.cfg]
source [find target/{target}.cfg]
{command_shutdown_on_detach}
adapter_khz {adapter_speed_khz}
{command_flash_partition_table}
{command_flash_bootloader}
{command_flash_firmware}
"""

def prepare_file():
    with open(path_openocd_config, 'w') as tmp:
        tmp.write(config_file)

def execute():
    # arguments = "-s {} -f {}".format(path_openocd_scripts_location, path_openocd_config)
    arguments = ["-s", path_openocd_scripts_location, "-f", path_openocd_config]
    if run_gdb_in_background:
        FNULL = open(os.devnull, 'w')
        # subprocess.Popen([path_openocd_executable] + arguments, stdout=FNULL, stderr=subprocess.STDOUT)
        subprocess.Popen([path_openocd_executable] + arguments)
    else:
        os.system(path_openocd_executable + ' ' + ' '.join(arguments))

if __name__ == "__main__":
    prepare_file()
    execute()
